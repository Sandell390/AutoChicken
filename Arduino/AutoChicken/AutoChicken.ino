#include <dht11.h>

#include "arduino_secrets.h"
#include "thingProperties.h"

dht11 DHT;

#define DHT11_PIN 1

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/409b51ba-f067-4c4d-8198-fa9e6d2ccba2

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool smartSwitch;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

bool AnalyseArray(short[] );

int BOWLTEMP_A_PIN = A0;
int WATERTANKTEMP_A_PIN = A1;
int WATERLEVEL_A_PIN = A2;

int HEATINGPLATE_D_PIN = 2;
int PUMP_D_PIN = 3;
int SWITCHFLOAT_D_PIN = 4;
int WATERLEVEL_D_PIN = 5;

bool TankHeater = false;
bool BowlHeater = false;

int TankTemps[50];
int BowlTemps[50];

byte tankTempIndex = 0;
byte BowlTempIndex = 0;

bool tankTempError = false;
bool bowlTempError = false;

void setup()
{
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  pinMode(BOWLTEMP_A_PIN, INPUT);
  pinMode(WATERTANKTEMP_A_PIN, INPUT);
  pinMode(WATERLEVEL_A_PIN, INPUT);

  pinMode(HEATINGPLATE_D_PIN, OUTPUT);
  pinMode(PUMP_D_PIN, OUTPUT);
  pinMode(SWITCHFLOAT_D_PIN, INPUT);
  pinMode(WATERLEVEL_D_PIN, OUTPUT);

  // Defined in thingProperties.h
  initProperties();
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop()
{
  ArduinoCloud.update();

  // Tank Water Temperature

  int tempRaw = analogRead(WATERTANKTEMP_A_PIN);
  int temp = map(tempRaw, 0, 1023, -10, 50);

  Serial.print("Water Temperature: ");
  Serial.print(temp);
  Serial.println("C");

  if (!tankTempError)
  {

    TankTemps[tankTempIndex] = temp;
    tankTempIndex++;

    if (tankTempIndex == 49)
    {
      tankTempIndex = 0;
        Serial.println("Runs analyser");

      bool test = AnalyseArray(TankTemps);
      if (!test)
      {
        Serial.println("ERROR");
      }
      else
      {
        Serial.println("OK");
      }

      for (int i = 0; i < 50; i++)
      {
        TankTemps[i] = 0;
      }
    }
  }

  delay(500);
}

bool AnalyseArray(int array[])
{
  for(int i = 0; i < 50; i++){

   int count = 0;

   for(int j = 0; j < 50; j++)
   {
      if(array[i] == array[j]){
        count++;

        if(count > 45){
      return false;
    }
      }
   }
   
    

  }

  return true;
}
